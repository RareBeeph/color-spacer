// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"colorspacer/model"
)

func newMidpoint(db *gorm.DB, opts ...gen.DOOption) midpoint {
	_midpoint := midpoint{}

	_midpoint.midpointDo.UseDB(db, opts...)
	_midpoint.midpointDo.UseModel(&model.Midpoint{})

	tableName := _midpoint.midpointDo.TableName()
	_midpoint.ALL = field.NewAsterisk(tableName)
	_midpoint.ID = field.NewUint(tableName, "id")
	_midpoint.CreatedAt = field.NewTime(tableName, "created_at")
	_midpoint.UpdatedAt = field.NewTime(tableName, "updated_at")
	_midpoint.DeletedAt = field.NewField(tableName, "deleted_at")
	_midpoint.StartpointR = field.NewFloat64(tableName, "startpoint_r")
	_midpoint.StartpointG = field.NewFloat64(tableName, "startpoint_g")
	_midpoint.StartpointB = field.NewFloat64(tableName, "startpoint_b")
	_midpoint.EndpointR = field.NewFloat64(tableName, "endpoint_r")
	_midpoint.EndpointG = field.NewFloat64(tableName, "endpoint_g")
	_midpoint.EndpointB = field.NewFloat64(tableName, "endpoint_b")
	_midpoint.MidpointR = field.NewFloat64(tableName, "midpoint_r")
	_midpoint.MidpointG = field.NewFloat64(tableName, "midpoint_g")
	_midpoint.MidpointB = field.NewFloat64(tableName, "midpoint_b")

	_midpoint.fillFieldMap()

	return _midpoint
}

type midpoint struct {
	midpointDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	StartpointR field.Float64
	StartpointG field.Float64
	StartpointB field.Float64
	EndpointR   field.Float64
	EndpointG   field.Float64
	EndpointB   field.Float64
	MidpointR   field.Float64
	MidpointG   field.Float64
	MidpointB   field.Float64

	fieldMap map[string]field.Expr
}

func (m midpoint) Table(newTableName string) *midpoint {
	m.midpointDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m midpoint) As(alias string) *midpoint {
	m.midpointDo.DO = *(m.midpointDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *midpoint) updateTableName(table string) *midpoint {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.StartpointR = field.NewFloat64(table, "startpoint_r")
	m.StartpointG = field.NewFloat64(table, "startpoint_g")
	m.StartpointB = field.NewFloat64(table, "startpoint_b")
	m.EndpointR = field.NewFloat64(table, "endpoint_r")
	m.EndpointG = field.NewFloat64(table, "endpoint_g")
	m.EndpointB = field.NewFloat64(table, "endpoint_b")
	m.MidpointR = field.NewFloat64(table, "midpoint_r")
	m.MidpointG = field.NewFloat64(table, "midpoint_g")
	m.MidpointB = field.NewFloat64(table, "midpoint_b")

	m.fillFieldMap()

	return m
}

func (m *midpoint) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *midpoint) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 13)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["startpoint_r"] = m.StartpointR
	m.fieldMap["startpoint_g"] = m.StartpointG
	m.fieldMap["startpoint_b"] = m.StartpointB
	m.fieldMap["endpoint_r"] = m.EndpointR
	m.fieldMap["endpoint_g"] = m.EndpointG
	m.fieldMap["endpoint_b"] = m.EndpointB
	m.fieldMap["midpoint_r"] = m.MidpointR
	m.fieldMap["midpoint_g"] = m.MidpointG
	m.fieldMap["midpoint_b"] = m.MidpointB
}

func (m midpoint) clone(db *gorm.DB) midpoint {
	m.midpointDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m midpoint) replaceDB(db *gorm.DB) midpoint {
	m.midpointDo.ReplaceDB(db)
	return m
}

type midpointDo struct{ gen.DO }

type IMidpointDo interface {
	gen.SubQuery
	Debug() IMidpointDo
	WithContext(ctx context.Context) IMidpointDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMidpointDo
	WriteDB() IMidpointDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMidpointDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMidpointDo
	Not(conds ...gen.Condition) IMidpointDo
	Or(conds ...gen.Condition) IMidpointDo
	Select(conds ...field.Expr) IMidpointDo
	Where(conds ...gen.Condition) IMidpointDo
	Order(conds ...field.Expr) IMidpointDo
	Distinct(cols ...field.Expr) IMidpointDo
	Omit(cols ...field.Expr) IMidpointDo
	Join(table schema.Tabler, on ...field.Expr) IMidpointDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMidpointDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMidpointDo
	Group(cols ...field.Expr) IMidpointDo
	Having(conds ...gen.Condition) IMidpointDo
	Limit(limit int) IMidpointDo
	Offset(offset int) IMidpointDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMidpointDo
	Unscoped() IMidpointDo
	Create(values ...*model.Midpoint) error
	CreateInBatches(values []*model.Midpoint, batchSize int) error
	Save(values ...*model.Midpoint) error
	First() (*model.Midpoint, error)
	Take() (*model.Midpoint, error)
	Last() (*model.Midpoint, error)
	Find() ([]*model.Midpoint, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Midpoint, err error)
	FindInBatches(result *[]*model.Midpoint, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Midpoint) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMidpointDo
	Assign(attrs ...field.AssignExpr) IMidpointDo
	Joins(fields ...field.RelationField) IMidpointDo
	Preload(fields ...field.RelationField) IMidpointDo
	FirstOrInit() (*model.Midpoint, error)
	FirstOrCreate() (*model.Midpoint, error)
	FindByPage(offset int, limit int) (result []*model.Midpoint, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMidpointDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m midpointDo) Debug() IMidpointDo {
	return m.withDO(m.DO.Debug())
}

func (m midpointDo) WithContext(ctx context.Context) IMidpointDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m midpointDo) ReadDB() IMidpointDo {
	return m.Clauses(dbresolver.Read)
}

func (m midpointDo) WriteDB() IMidpointDo {
	return m.Clauses(dbresolver.Write)
}

func (m midpointDo) Session(config *gorm.Session) IMidpointDo {
	return m.withDO(m.DO.Session(config))
}

func (m midpointDo) Clauses(conds ...clause.Expression) IMidpointDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m midpointDo) Returning(value interface{}, columns ...string) IMidpointDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m midpointDo) Not(conds ...gen.Condition) IMidpointDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m midpointDo) Or(conds ...gen.Condition) IMidpointDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m midpointDo) Select(conds ...field.Expr) IMidpointDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m midpointDo) Where(conds ...gen.Condition) IMidpointDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m midpointDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMidpointDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m midpointDo) Order(conds ...field.Expr) IMidpointDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m midpointDo) Distinct(cols ...field.Expr) IMidpointDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m midpointDo) Omit(cols ...field.Expr) IMidpointDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m midpointDo) Join(table schema.Tabler, on ...field.Expr) IMidpointDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m midpointDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMidpointDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m midpointDo) RightJoin(table schema.Tabler, on ...field.Expr) IMidpointDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m midpointDo) Group(cols ...field.Expr) IMidpointDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m midpointDo) Having(conds ...gen.Condition) IMidpointDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m midpointDo) Limit(limit int) IMidpointDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m midpointDo) Offset(offset int) IMidpointDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m midpointDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMidpointDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m midpointDo) Unscoped() IMidpointDo {
	return m.withDO(m.DO.Unscoped())
}

func (m midpointDo) Create(values ...*model.Midpoint) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m midpointDo) CreateInBatches(values []*model.Midpoint, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m midpointDo) Save(values ...*model.Midpoint) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m midpointDo) First() (*model.Midpoint, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Midpoint), nil
	}
}

func (m midpointDo) Take() (*model.Midpoint, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Midpoint), nil
	}
}

func (m midpointDo) Last() (*model.Midpoint, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Midpoint), nil
	}
}

func (m midpointDo) Find() ([]*model.Midpoint, error) {
	result, err := m.DO.Find()
	return result.([]*model.Midpoint), err
}

func (m midpointDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Midpoint, err error) {
	buf := make([]*model.Midpoint, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m midpointDo) FindInBatches(result *[]*model.Midpoint, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m midpointDo) Attrs(attrs ...field.AssignExpr) IMidpointDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m midpointDo) Assign(attrs ...field.AssignExpr) IMidpointDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m midpointDo) Joins(fields ...field.RelationField) IMidpointDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m midpointDo) Preload(fields ...field.RelationField) IMidpointDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m midpointDo) FirstOrInit() (*model.Midpoint, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Midpoint), nil
	}
}

func (m midpointDo) FirstOrCreate() (*model.Midpoint, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Midpoint), nil
	}
}

func (m midpointDo) FindByPage(offset int, limit int) (result []*model.Midpoint, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m midpointDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m midpointDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m midpointDo) Delete(models ...*model.Midpoint) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *midpointDo) withDO(do gen.Dao) *midpointDo {
	m.DO = *do.(*gen.DO)
	return m
}
